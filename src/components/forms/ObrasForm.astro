---
import FormField from './FormField.astro';

const estadoOptions = [
  { value: 'planificacion', label: 'Planificación' },
  { value: 'en_progreso', label: 'En Progreso' },
  { value: 'pausada', label: 'Pausada' },
  { value: 'completada', label: 'Completada' }
];
---

<form class="obras-form" id="obras-form">
  <div class="form-grid">
    <div class="form-column">
      <FormField 
        label="Nombre de la Obra" 
        name="nombre" 
        required={true}
        placeholder="Ej: Centro Comercial Plaza Norte"
      />
      
      <FormField 
        label="Estado" 
        name="estado" 
        type="select"
        options={estadoOptions}
        required={true}
      />
      
      <FormField 
        label="Fecha de Inicio" 
        name="fecha_inicio" 
        type="date"
        required={true}
      />
    </div>
    
    <div class="form-column">
      <FormField 
        label="Fecha de Finalización" 
        name="fecha_fin" 
        type="date"
        required={true}
      />
      
      <FormField 
        label="Responsable del Proyecto" 
        name="responsable" 
        placeholder="Nombre del responsable"
        required={true}
      />
      
      <FormField 
        label="Ubicación" 
        name="ubicacion" 
        placeholder="Dirección completa de la obra"
        required={true}
      />
    </div>
  </div>
  
  <FormField 
    label="Descripción" 
    name="descripcion" 
    type="textarea"
    rows={4}
    placeholder="Descripción detallada de la obra..."
  />
  
  <div class="form-actions">
    <button type="button" class="btn-cancel" data-close-modal="modal-nueva-obra">
      Cancelar
    </button>
    <button type="submit" class="btn-submit">
      <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      Crear Obra
    </button>
  </div>
</form>

<style>
  .obras-form {
    max-width: none;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 24px;
    margin-bottom: 20px;
  }

  .form-column {
    display: flex;
    flex-direction: column;
  }

  .form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    padding-top: 20px;
    border-top: 1px solid #e5e7eb;
  }

  .btn-cancel {
    padding: 10px 20px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-cancel:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .btn-submit {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 20px;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-submit:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script type="module">
  document.getElementById('obras-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const submitButton = form.querySelector('.btn-submit');
    
    // Deshabilitar botón durante el envío
    submitButton.disabled = true;
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML = `
      <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="animate-spin">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
      </svg>
      Creando...
    `;

    const body = {
      nombre: formData.get('nombre'),
      estado: formData.get('estado'),
      fecha_inicio: formData.get('fecha_inicio'),
      fecha_fin: formData.get('fecha_fin'),
      ubicacion: formData.get('ubicacion'),
      responsable: formData.get('responsable'),
      descripcion: formData.get('descripcion'),
    };

    try {
      const res = await fetch('/api/obras/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      const json = await res.json();
      
      if (json.success) {
        // Mostrar éxito
        submitButton.innerHTML = `
          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          ¡Obra creada!
        `;
        submitButton.style.background = '#10b981';
        
        // Recargar la página después de un breve delay
        setTimeout(() => {
          location.reload();
        }, 1500);
      } else {
        throw new Error(json.error || 'Error al crear la obra');
      }
    } catch (error) {
      console.error('Error al crear obra:', error);
      
      // Mostrar error
      submitButton.innerHTML = `
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        Error al crear
      `;
      submitButton.style.background = '#ef4444';
      
      // Restaurar botón después de un delay
      setTimeout(() => {
        submitButton.innerHTML = originalText;
        submitButton.style.background = '';
        submitButton.disabled = false;
      }, 2000);
    }
  });
</script>